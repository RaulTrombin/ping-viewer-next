name: Test all targets

on: [push, pull_request]

permissions:
  contents: write

jobs:
  quick-tests:
    runs-on: ubuntu-22.04
    steps:
      - name: Install build dependencies
        uses: awalsh128/cache-apt-pkgs-action@v1.4.3
        with:
          packages: |
            curl \
            git

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set directory to safe for git
        # Note: Required by vergen (https://crates.io/crates/vergen)
        run: git config --global --add safe.directory $GITHUB_WORKSPACE

      - name: install dependencies (desktop-app)
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install build dependencies - Rustup
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --default-toolchain stable -y
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install build dependencies - Bun
        uses: oven-sh/setup-bun@v2.0.1
        with:
          bun-version: 1.1.30

      - name: Check style
        run: cargo fmt --check

      - name: Check clippy
        run: cargo clippy --all-features

      - name: Build
        run: cargo build --verbose

  build-frontend:
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: ping-viewer-next-frontend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.1.22

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Format check
        run: bunx biome format

      - name: Lint check
        run: bunx biome lint

      - name: Build project
        run: bun run build

      - name: Upload dist folder
        uses: actions/upload-artifact@v4.4.0
        with:
          name: dist
          path: ping-viewer-next-frontend/dist

  build:
          needs: [quick-tests, build-frontend]
          runs-on: ${{ matrix.os }}
          strategy:
            fail-fast: false
            matrix:
              include:
              - os: macos-14
                TARGET: aarch64-apple-darwin

              - os: macos-14
                TARGET: x86_64-apple-darwin

              - os: ubuntu-22.04
                TARGET: aarch64-unknown-linux-musl

              - os: ubuntu-22.04
                TARGET: armv7-unknown-linux-musleabihf

              - os: ubuntu-22.04
                TARGET: x86_64-unknown-linux-gnu

              - os: windows-2022
                TARGET: x86_64-pc-windows-msvc
                EXTENSION: .exe

          steps:
          - name: Building ${{ matrix.TARGET }}
            run: echo "${{ matrix.TARGET }}"

          - uses: actions/checkout@master

          - name: Download frontend build
            uses: actions/download-artifact@v4.1.8
            with:
              name: dist
              path: ./ping-viewer-next-frontend/dist

          - name: Build
            uses: houseabsolute/actions-rust-cross@v0.0.14
            with:
              target: ${{ matrix.TARGET }}
              args: "--release --features embed-frontend"

          - name: Rename
            run: cp target/${{ matrix.TARGET }}/release/${{ github.event.repository.name }}${{ matrix.EXTENSION }} ${{ github.event.repository.name }}-${{ matrix.TARGET }}${{ matrix.EXTENSION }}

          - uses: actions/upload-artifact@master
            with:
              name: ${{ github.event.repository.name }}-${{ matrix.TARGET }}${{ matrix.EXTENSION }}
              path: ${{ github.event.repository.name }}-${{ matrix.TARGET }}${{ matrix.EXTENSION }}

          - uses: svenstaro/upload-release-action@v2
            name: Upload binaries to release
            if: ${{ github.event_name == 'push' }}
            with:
              repo_token: ${{ secrets.GITHUB_TOKEN }}
              file: ${{ github.event.repository.name }}-${{ matrix.TARGET }}${{ matrix.EXTENSION }}
              asset_name: ${{ github.event.repository.name }}-${{ matrix.TARGET }}${{ matrix.EXTENSION }}
              tag: ${{ github.ref }}
              prerelease: ${{ !startsWith(github.ref, 'refs/tags/') }}
              overwrite: true

  build-tauri:
          needs: quick-tests
          permissions:
            contents: write
          strategy:
            fail-fast: false
            matrix:
              include:
                - platform: 'macos-latest'
                  args: '--target aarch64-apple-darwin'
                  label: 'Mac-ARM64'
                - platform: 'macos-latest'
                  args: '--target x86_64-apple-darwin'
                  label: 'Mac-x86'
                - platform: 'ubuntu-22.04'
                  args: ''
                  label: 'Linux'
                - platform: 'windows-latest'
                  args: ''
                  label: 'Windows'

          runs-on: ${{ matrix.platform }}
          steps:
            - uses: actions/checkout@v4

            - name: install dependencies (ubuntu only)
              if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
              run: |
                sudo apt-get update
                sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
              # webkitgtk 4.0 is for Tauri v1 - webkitgtk 4.1 is for Tauri v2.

            - name: setup node
              uses: actions/setup-node@v4
              with:
                node-version: lts/*

            - name: Setup Bun
              uses: oven-sh/setup-bun@v1
              with:
                bun-version: latest

            - name: install Rust stable
              uses: dtolnay/rust-toolchain@stable
              with:
                # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
                targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

            - name: Rust cache
              uses: swatinem/rust-cache@v2
              with:
                workspaces: './src-tauri -> target'

            - name: Install dependencies
              run: |
                cd ping-viewer-next-desktop
                bun install

            - name: Build the app
              id: tauri-build
              uses: tauri-apps/tauri-action@v0.5.13
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                projectPath: './ping-viewer-next-desktop'
                args: ${{ matrix.args }}

            - name: Upload artifacts
              uses: actions/upload-artifact@v4.4.0
              with:
                name: 'ping-viewer_${{steps.tauri-build.outputs.appVersion}}_${{ matrix.label }}'
                path: "${{ join(fromJSON(steps.tauri-build.outputs.artifactPaths), '\n') }}"
                retention-days: 5
